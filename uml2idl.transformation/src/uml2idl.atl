-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @path IDL=/uml2idl/metamodel/model/idl.ecore
-- Transforms UML Interfaces into Thrift services

module uml2thrift;
create OUT : IDL from IN : UML;

helper def: counter: Integer = 1;

rule parameter2parameter {
	from
		m1 : UML!Parameter (m1.direction.name = 'in')
	to
		m2 : IDL!Parameter(
			name <- m1.name,
			type <- m1.type.name,
			id <- thisModule.counter,
			isList <- 
					if m1.upper = 1
					then
						false
					else
						true
					endif
			)
	do{
		thisModule.counter <- thisModule.counter + 1;
	}
}


	

--rule parameter2functiontype {
--	from
--		m1 : UML!Parameter (m1.direction.name = 'return')
--	to
--		m2 : IDL!FieldType(
--			name <- m1.name
--			 
--		)
--}


rule operation2function{
    from
        m1 : UML!Operation
    to
        m2 : IDL!Function(
            name <- m1.name,
			type <- 
				if  (m1.type.oclIsUndefined())
				then
					'undefined'
				else
					m1.type.name
				endif,
				
			parameters <- m1.ownedParameter -> select(e| e.direction.name = 'in')
        )
}



rule model2model {
	from
		m1 : UML!Model
	to
		m2 : IDL!IDLModel (
				name <- m1.name ,
				services <- m1.getOwnedMembers()->select(e| e.oclIsTypeOf(UML!Interface)),
				structs <- m1.getOwnedMembers()->select(e| e.oclIsTypeOf(UML!DataType))
			)
		
} 

rule interface2service {
	from
		m1 : UML!Interface
	to
		m2 : IDL!Service(
			name <- m1.name,
			functions <- m1.ownedOperation
		)
	
}



rule datatype2struct {
	from
		m1 : UML!DataType
	to
		m2 : IDL!Struct(
			name <- m1.name,
			fields <- m1.ownedAttribute
			
		)
	do {
        thisModule.counter <- 1;
    }
}

rule property2field {
	from
		m1 : UML!Property
	to
		m2 : IDL!Field(
			name <- m1.name,
			type <- m1.type.name,
			id <- thisModule.counter,
			isList <- 
					if m1.upper = 1
					then
						false
					else
						true
					endif
			
		)
	do{
		thisModule.counter <- thisModule.counter + 1;
	}
}


